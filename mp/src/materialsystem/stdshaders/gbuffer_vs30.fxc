// gbuffer_vs30.fxc

#include "common_vs_fxc.h"

struct VS_INPUT {
    float4 position : POSITION;
    float3 normal   : NORMAL;
    float2 texcoord : TEXCOORD0;
    float4 tangent  : TANGENT;
};

struct VS_OUTPUT {
    float4 position : POSITION;
    float3 worldPos : TEXCOORD0;
    float3 normal   : TEXCOORD1;
    float2 texcoord : TEXCOORD2;
};

cbuffer TransformBuffer : register(b0) {
    float4x4 modelMatrix;
    float4x4 viewMatrix;
    float4x4 projectionMatrix;
};

VS_OUTPUT main(VS_INPUT input) {
    VS_OUTPUT output;

    // Transform position to world space
    float4 worldPos = mul(modelMatrix, input.position);
    output.worldPos = worldPos.xyz;

    // Transform position to clip space
    output.position = mul(projectionMatrix, mul(viewMatrix, worldPos));

    // Transform normal to world space
    output.normal = normalize(mul((float3x3)modelMatrix, input.normal));

    // Pass through texture coordinates
    output.texcoord = input.texcoord;

    return output;
}
